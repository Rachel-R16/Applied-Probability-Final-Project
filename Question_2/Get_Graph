import matplotlib.pyplot as plt
import seaborn as sns


def get_scatter_plot(team_summary):
    # Scatter plot of Offensive Strength vs Defensive Strength
    plt.figure(figsize=(12, 8))

    # Use scatterplot to visualize the data
    sns.scatterplot(x='OffensiveStrength', y='DefensiveStrength', data=team_summary,
                    hue='Team', palette='Set2', s=100, alpha=0.7)

    # Add a regression line (line of best fit)
    sns.regplot(x='OffensiveStrength', y='DefensiveStrength', data=team_summary,
                scatter=False, color='red', ci=None, line_kws={"linewidth": 2, "linestyle": "--"})

    # Set plot title and labels
    plt.title('Offensive Strength vs Defensive Strength', fontsize=16, weight='bold', color='darkblue')
    plt.xlabel('Offensive Strength', fontsize=14)
    plt.ylabel('Defensive Strength', fontsize=14)

    # Customize the plot appearance
    plt.grid(True, linestyle='--', alpha=0.6)
    plt.xticks(fontsize=12)
    plt.yticks(fontsize=12)

    # Show the plot
    plt.show()

    # Show the plot
    plt.tight_layout()
    plt.show()



#cumulative points graph (not a function) 

for match_idx, (home, away) in enumerate(total_matches):
    λ_home = max(O_home * D_away * goal_conversion[home], 0.1)  # chnaged
    λ_away = max(O_away * D_home * goal_conversion[away], 0.1)

    # Ensure λ_home and λ_away are not 0 or NaN
    if np.isnan(λ_home) or λ_home <= 0:
        λ_home = 0.01  # Assign a small positive value
    if np.isnan(λ_away) or λ_away <= 0:
        λ_away = 0.01  # Assign a small positive value
    goals_home = np.random.poisson(λ_home)
    goals_away = np.random.poisson(λ_away)

    if goals_home > goals_away:
        cumulative_points[match_idx:, home] += 3
    elif goals_home < goals_away:
        cumulative_points[match_idx:, away] += 3
    else:
        cumulative_points[match_idx:, home] += 1
        cumulative_points[match_idx:, away] += 1

# Plotting
plt.figure(figsize=(14, 8))
for team_idx, team in enumerate(teams):
    plt.plot(cumulative_points[:, team_idx], label=team)

plt.title("Cumulative Points Over Matches", fontsize=14)
plt.xlabel("Matches")
plt.ylabel("Cumulative Points")

# Place the legend outside the plot
plt.legend(loc="center left", bbox_to_anchor=(1, 0.5), title="Teams", fontsize=10)

# Adjust layout to make space for the legend
plt.subplots_adjust(right=0.75)  # Increase right margin to fit legend
plt.show()


#average points graph (also not a funciton) 
plt.figure(figsize=(12, 6))
sns.barplot(data=summary_table, x="Avg Points", y="Team", palette="viridis")
plt.title("Average Points per Team (Predicted League Table)", fontsize=16)
plt.xlabel("Average Points")
plt.ylabel("Team")
plt.show()
