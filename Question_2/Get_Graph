import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import pandas as pd


def get_scatter_plot(team_summary):
    # Scatter plot of Offensive Strength vs Defensive Strength
    plt.figure(figsize=(12, 8))

    # Use scatterplot to visualize the data
    sns.scatterplot(x='OffensiveStrength', y='DefensiveStrength', data=team_summary,
                    hue='Team', palette='Set2', s=100, alpha=0.7)

    # Add a regression line (line of best fit)
    sns.regplot(x='OffensiveStrength', y='DefensiveStrength', data=team_summary,
                scatter=False, color='red', ci=None, line_kws={"linewidth": 2, "linestyle": "--"})

    # Set plot title and labels
    plt.title('Offensive Strength vs Defensive Strength', fontsize=16, weight='bold', color='darkblue')
    plt.xlabel('Offensive Strength', fontsize=14)
    plt.ylabel('Defensive Strength', fontsize=14)

    # Customize the plot appearance
    plt.grid(True, linestyle='--', alpha=0.6)
    plt.xticks(fontsize=12)
    plt.yticks(fontsize=12)

    # Show the plot
    plt.show()

    # Show the plot
    plt.tight_layout()
    plt.show()


def get_table(data):
    # Update the teams list
    teams = data['Team'].values
    offensive_strength = data['OffensiveStrength'].values
    defensive_strength = data['DefensiveStrength'].values
    recent_form = data['Form'].values
    goal_conversion = data['GoalConversionRate'].values

    # Monte Carlo Simulation Parameters
    NUM_SIMULATIONS = 10000
    NUM_TEAMS = len(teams)
    total_matches = [(i, j) for i in range(NUM_TEAMS) for j in range(NUM_TEAMS) if i != j]
    final_points = np.zeros((NUM_SIMULATIONS, NUM_TEAMS))

    for sim in range(NUM_SIMULATIONS):
        points = np.zeros(NUM_TEAMS)

        for home, away in total_matches:
            # Adjust strengths using recent form
            O_home = offensive_strength[home] * (1 + 0.05 * recent_form[home])  # chnaged
            D_away = defensive_strength[away] * (1 - 0.05 * recent_form[away])
            O_away = offensive_strength[away] * (1 + 0.05 * recent_form[away])
            D_home = defensive_strength[home] * (1 - 0.05 * recent_form[home])

            # Expected goals (λ values)
            x_home = max(O_home * D_away * goal_conversion[home], 0.1)  # chnaged
            x_away = max(O_away * D_home * goal_conversion[away], 0.1)

            # Ensure λ_home and λ_away are not 0 or NaN
            if np.isnan(x_home) or x_home <= 0:
                x_home = 0.01  # Assign a small positive value
            if np.isnan(x_away) or x_away <= 0:
                x_away = 0.01  # Assign a small positive value

            # Simulate goals using Poisson distribution
            goals_home = np.random.poisson(x_home)
            goals_away = np.random.poisson(x_away)

            # Assign points
            if goals_home > goals_away:
                points[home] += 3
            elif goals_home < goals_away:
                points[away] += 3
            else:
                points[home] += 1
                points[away] += 1

        final_points[sim] = points

    # Aggregate results
    average_points = final_points.mean(axis=0)
    win_probability = (final_points == final_points.max(axis=1)[:, None]).mean(axis=0)

    # Create summary DataFrame
    summary_table = pd.DataFrame({
        "Team": teams,
        "Avg Points": average_points,
        "Win Probability": win_probability
    }).sort_values(by="Avg Points", ascending=False).reset_index(drop=True)

    return summary_table

def get_cumm_plot(data):
    teams = data['Team'].values
    offensive_strength = data['OffensiveStrength'].values
    defensive_strength = data['DefensiveStrength'].values
    recent_form = data['Form'].values
    goal_conversion = data['GoalConversionRate'].values
    NUM_TEAMS = len(teams)
    total_matches = [(i, j) for i in range(NUM_TEAMS) for j in range(NUM_TEAMS) if i != j]
    cumulative_points = np.zeros((len(total_matches) + 1, NUM_TEAMS))

    for home, away in total_matches:
        # Adjust strengths using recent form
        O_home = offensive_strength[home] * (1 + 0.05 * recent_form[home])  # chnaged
        D_away = defensive_strength[away] * (1 - 0.05 * recent_form[away])
        O_away = offensive_strength[away] * (1 + 0.05 * recent_form[away])
        D_home = defensive_strength[home] * (1 - 0.05 * recent_form[home])
        for match_idx, (home, away) in enumerate(total_matches):
            x_home = max(O_home * D_away * goal_conversion[home], 0.1)  # chnaged
            x_away = max(O_away * D_home * goal_conversion[away], 0.1)

            # Ensure λ_home and λ_away are not 0 or NaN
            if np.isnan(x_home) or x_home <= 0:
                x_home = 0.01  # Assign a small positive value
            if np.isnan(x_away) or x_away <= 0:
                x_away = 0.01  # Assign a small positive value
            goals_home = np.random.poisson(x_home)
            goals_away = np.random.poisson(x_away)

            if goals_home > goals_away:
                cumulative_points[match_idx:, home] += 3
            elif goals_home < goals_away:
                cumulative_points[match_idx:, away] += 3
            else:
                cumulative_points[match_idx:, home] += 1
                cumulative_points[match_idx:, away] += 1

    # Plotting
    plt.figure(figsize=(14, 8))
    for team_idx, team in enumerate(teams):
        plt.plot(cumulative_points[:, team_idx], label=team)

    plt.title("Cumulative Points Over Matches", fontsize=14)
    plt.xlabel("Matches")
    plt.ylabel("Cumulative Points")

    # Place the legend outside the plot
    plt.legend(loc="center left", bbox_to_anchor=(1, 0.5), title="Teams", fontsize=10)

    # Adjust layout to make space for the legend
    plt.subplots_adjust(right=0.75)  # Increase right margin to fit legend
    plt.show()

    # Place the legend outside the plot
    plt.legend(loc="center left", bbox_to_anchor=(1, 0.5), title="Teams", fontsize=10)

    # Adjust layout to make space for the legend
    plt.subplots_adjust(right=0.75)  # Increase right margin to fit legend
    plt.show()


def get_summary_graph(summary_table):
    # average points graph (also not a funciton)
    plt.figure(figsize=(12, 6))
    sns.barplot(data=summary_table, x="Avg Points", y="Team", palette="viridis")
    plt.title("Average Points per Team (Predicted League Table)", fontsize=16)
    plt.xlabel("Average Points")
    plt.ylabel("Team")
    plt.show()
