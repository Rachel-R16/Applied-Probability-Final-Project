import numpy as np
import pandas as pd


def get_table(data):
    # Update the teams list
    teams = data['Team'].values
    offensive_strength = data['OffensiveStrength'].values
    defensive_strength = data['DefensiveStrength'].values
    recent_form = data['Form'].values
    goal_conversion = data['GoalConversionRate'].values

    # Monte Carlo Simulation Parameters
    NUM_SIMULATIONS = 10000
    NUM_TEAMS = len(teams)
    total_matches = [(i, j) for i in range(NUM_TEAMS) for j in range(NUM_TEAMS) if i != j]
    final_points = np.zeros((NUM_SIMULATIONS, NUM_TEAMS))

    for sim in range(NUM_SIMULATIONS):
        points = np.zeros(NUM_TEAMS)

        for home, away in total_matches:
            # Adjust strengths using recent form
            O_home = offensive_strength[home] * (1 + 0.05 * recent_form[home])  # chnaged
            D_away = defensive_strength[away] * (1 - 0.05 * recent_form[away])
            O_away = offensive_strength[away] * (1 + 0.05 * recent_form[away])
            D_home = defensive_strength[home] * (1 - 0.05 * recent_form[home])

            # Expected goals (λ values)
            x_home = max(O_home * D_away * goal_conversion[home], 0.1)  # chnaged
            x_away = max(O_away * D_home * goal_conversion[away], 0.1)

            # Ensure λ_home and λ_away are not 0 or NaN
            if np.isnan(x_home) or x_home <= 0:
                x_home = 0.01  # Assign a small positive value
            if np.isnan(x_away) or x_away <= 0:
                x_away = 0.01  # Assign a small positive value

            # Simulate goals using Poisson distribution
            goals_home = np.random.poisson(x_home)
            goals_away = np.random.poisson(x_away)

            # Assign points
            if goals_home > goals_away:
                points[home] += 3
            elif goals_home < goals_away:
                points[away] += 3
            else:
                points[home] += 1
                points[away] += 1

        final_points[sim] = points

    # Aggregate results
    average_points = final_points.mean(axis=0)
    win_probability = (final_points == final_points.max(axis=1)[:, None]).mean(axis=0)

    # Create summary DataFrame
    summary_table = pd.DataFrame({
        "Team": teams,
        "Avg Points": average_points,
        "Win Probability": win_probability
    }).sort_values(by="Avg Points", ascending=False).reset_index(drop=True)

    print(summary_table)

