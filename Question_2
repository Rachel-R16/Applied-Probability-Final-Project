import time
from selenium import webdriver
from bs4 import BeautifulSoup
import pandas as pd
from selenium.webdriver.common.by import By
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier
from sklearn.metrics import mean_squared_error, accuracy_score
import xgboost as xgb
from sklearn.linear_model import LogisticRegression



# Define year codes and URL
historical_url = "https://www.premierleague.com/stats/top/clubs/"
historical_stats_parameters = ["goals", "goals_conceded", "ontarget_scoring_att"]
years = {
    "4": {"year": "2023/24", "code": "?se=578", "weight": 4},
    "3": {"year": "2022/23", "code": "?se=489", "weight": 3},
    "2": {"year": "2021/22", "code": "?se=418", "weight": 2},
    "1": {"year": "2020/21", "code": "?se=363", "weight": 1}
}

current_url = "https://www.premierleague.com/tables"
result_mapping = {
                'W': 1,  # Win
                'D': 0.5,  # Draw
                'L': 0  # Loss
            }

# Initialize Selenium driver
driver = webdriver.Chrome()


def page_table_data(year, param, data_list):
    # Parse the page for the table
    soup = BeautifulSoup(driver.page_source, 'html.parser')
    table = soup.find('table')

    # Extract data from the table
    for row in table.find_all('tr')[1:]:  # Skip header
        cells = row.find_all('td')
        if len(cells) >= 3:
            team = cells[1].text.strip()
            value = cells[2].text.strip().replace(",", "")
            if value.isdigit():
                value = int(value)
                data_list.append({"Year": year, "Team": team, param: value})


def get_strengths():
    # Data storage
    goals_data = []
    conceded_data = []
    shots_data = []

    try:
        for vals in years.values():
            year = vals.get("year")
            code = vals.get("code")

            # Loop for both 'goals' and 'goals_conceded'
            for param, data_list in zip(historical_stats_parameters, [goals_data, conceded_data, shots_data]):
                url = historical_url + param + code
                print(f"Fetching {param} data for year {year} from {url}")

                # Start with scraping the first page
                driver.get(url)
                time.sleep(5)  # Wait for JS to load

                page_table_data(year, param, data_list)

                # Check if the "next" button exists and click it
                next_button = driver.find_element(By.XPATH, "/html/body/main/div[2]/div[1]/div[2]/div[2]")
                # Click the "next" button to go to the next page
                print("Clicked next button for more pages.")
                next_button.click()
                time.sleep(5)  # Wait for the next page to load

                page_table_data(year, param, data_list)

    finally:
        driver.quit()

    # Convert both data lists to DataFrames
    goals_df = pd.DataFrame(goals_data)
    conceded_df = pd.DataFrame(conceded_data)
    shots_df = pd.DataFrame(shots_data)

    # Merge both dataframes on 'Year' and 'Team'
    part_df = pd.merge(goals_df, conceded_df, on=["Year", "Team"], how="outer")
    merged_df = pd.merge(part_df, shots_df, on=["Year", "Team"], how="outer")

    # Assign weights based on the 'Year' after merging
    merged_df['Weight'] = merged_df['Year'].map({vals["year"]: vals["weight"] for vals in years.values()})
    merged_df = merged_df.fillna(0)

    merged_df['WeightedGoals'] = merged_df['Weight'] * merged_df['goals']
    merged_df['WeightedMatches'] = merged_df['Weight'] * 20  # Assuming 20 matches per year
    merged_df['WeightedGoalsConceded'] = merged_df['Weight'] * merged_df['goals_conceded']

    # Avoid division by zero in GoalConversionRate calculation
    merged_df['GoalConversionRate'] = merged_df.apply(
        lambda row: row['goals'] / row['ontarget_scoring_att'] if row['ontarget_scoring_att'] > 0 else 0, axis=1
    )

    # Group by team and aggregate relevant statistics
    team_summary = merged_df.groupby('Team').agg({
        'WeightedGoals': 'sum',
        'WeightedMatches': 'sum',
        'WeightedGoalsConceded': 'sum',
        'GoalConversionRate': 'mean'  # Use 'mean' for the average conversion rate
    }).reset_index()

    # Calculate total Offensive Strength and Defensive Strength for each team
    team_summary['OffensiveStrength'] = team_summary['WeightedGoals'] / team_summary['WeightedMatches']
    team_summary['DefensiveStrength'] = 5 - team_summary['WeightedGoalsConceded'] / team_summary['WeightedMatches']

    # Return relevant statistics
    return team_summary[['Team', 'OffensiveStrength', 'DefensiveStrength', 'GoalConversionRate']]


def get_form():
    new_driver = webdriver.Chrome()
    time.sleep(10)
    new_driver.get(current_url)
    time.sleep(5)  # Allow JavaScript to load

    # Get page source and parse with BeautifulSoup
    soup = BeautifulSoup(new_driver.page_source, 'html.parser')

    # Find the relevant data (example: team stats in the table)
    table = soup.find('table')  # Adjust based on the page structure
    rows = table.find_all('tr')[1:]  # Skipping the header row

    # Define the categories
    form_data = []

    # Loop through each row and extract data
    for row in rows:
        cells = row.find_all('td')
        if len(cells) > 1:
            soup = BeautifulSoup(str(row), 'html.parser')

            # Find the match results (in the <ul> under class 'league-table__form form hideMed')
            result_tags = soup.find('td', class_='league-table__form form hideMed').find_all('abbr')

            # Extract match results (W, D, L)
            results = [tag.get_text() for tag in result_tags]

            # Convert results to numeric values
            numeric_results = [result_mapping[result] for result in results]

            # Assign weights (5 for the most recent, 1 for the 5th most recent)
            weights = [5 - i for i in range(len(results))]

            # Get the club name (can be extracted from the 'league-table__team-name' span)
            club_name = soup.find('span', class_='league-table__team-name league-table__team-name--long long').get_text()

            # Create a list of dictionaries for each result and weight
            data = []
            for i in range(len(results)):
                data.append({
                    'Club Name': club_name,
                    'Result': numeric_results[i],
                    'Weight': weights[i]
                })

            # Create a DataFrame from the data for this club
            df = pd.DataFrame(data)

            # Now, calculate the form for this club
            weighted_sum = (df['Result'] * df['Weight']).sum()  # Sum of weight * result
            weight_sum = df['Weight'].sum()  # Sum of weights
            form = weighted_sum / weight_sum  # Calculate form

            # Add the club and form to the form_data list
            form_data.append({'Team': club_name, 'Form': form})

    return pd.DataFrame(form_data)



team_summary = get_strengths()
form_data = get_form()
# Assume `team_summary` and `form_data` are DataFrames from the previous functions

# Merge the dataframes on 'Team'
merged_data = pd.merge(team_summary, form_data, on='Team', how='inner')
print(merged_data)
